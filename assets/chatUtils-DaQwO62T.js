import{s as n}from"./index-BGZJ43Tf.js";async function u(o,r){if(console.log("Finding or creating chat thread between",{authorId:o,userId:r}),!o||!r)throw new Error("Both authorId and userId are required");try{const{data:t,error:i}=await n.from("chat_threads").select("*").or(`user_id.eq.${r},consultant_id.eq.${r}`).or(`user_id.eq.${o},consultant_id.eq.${o}`).limit(10);if(i)throw console.error("Error checking for existing thread:",i),i;const s=t?.find(e=>e.user_id===r&&e.consultant_id===o||e.user_id===o&&e.consultant_id===r);if(s)return console.log("Existing thread found:",s),s;console.log("Creating new thread");let a,c;try{const{data:e,error:g}=await n.from("users").select("id, role").in("id",[r,o]);if(g)throw console.error("Error checking user roles:",g),g;if(a=o,c=r,e&&e.length>0){const h=e.find(f=>f.id===r)?.role,_=e.find(f=>f.id===o)?.role;(h==="consultant"||h==="admin"||h==="owner")&&_==="user"&&(a=r,c=o)}}catch(e){console.error("Error determining user roles:",e)}const{data:l,error:d}=await n.from("chat_threads").insert({user_id:c,consultant_id:a,last_message_at:new Date().toISOString()}).select().single();if(d)throw console.error("Error creating chat thread:",d),d;console.log("New thread created:",l);const{error:w}=await n.from("chat_messages").insert({thread_id:l.id,sender_id:r,content:"Hi, I read your story and wanted to chat!"});return w&&console.error("Error creating initial message:",w),l}catch(t){throw console.error("Error in findOrCreateChatThread:",t),t}}export{u as f};
